#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
from gevent import joinall, spawn
import argparse
import signal
import sys
from setproctitle import setproctitle; setproctitle('inbox')

from inbox.server.config import config, load_config
from inbox.server.log import configure_general_logging, get_logger
log = get_logger()

def debug(args=None):
    """ Run the server with autoreload. TODO add debug flag to startup."""
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)

def start(args=None):
    # commit = subprocess.check_output(["git", "describe", "--tags"])
    from inbox.server.models import init_db
    init_db()

    threads = []

    # Start ZeroRPC api server service
    from inbox.server.util.concurrency import make_zerorpc
    from inbox.server.api import API
    api_srv_loc = config.get('API_SERVER_LOC', None)
    threads.append(make_zerorpc(API, api_srv_loc))

    # Start ZeroRPC mail sync server service
    from inbox.server.mailsync.service import SyncService
    sync_srv_loc = config.get('CRISPIN_SERVER_LOC', None)
    threads.append(make_zerorpc(SyncService, sync_srv_loc))

    # Start ZeroRPC contacts sync service
    from inbox.server.rolodex import ContactSync
    contacts_srv_loc = config.get('ROLODEX_SERVER_LOC', None)
    threads.append(make_zerorpc(ContactSync, contacts_srv_loc))

    # start ZeroRPC search server service
    from inbox.server.search import SearchService
    search_srv_loc = config.get('SEARCH_SERVER_LOC', None)
    threads.append(make_zerorpc(SearchService, search_srv_loc))

    from inbox.server.actions import rqworker
    threads.append(spawn(rqworker))

    print """
\033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """

    log.info("Recursion limit: {0}".format(sys.getrecursionlimit()))

    # hang out forever and run some services
    joinall(threads)

def sync(args):
    import zerorpc

    from inbox.server.models import session_scope
    from inbox.server.models.tables import ImapAccount
    from sqlalchemy.orm.exc import NoResultFound

    with session_scope() as db_session:
        try:
            account_id = db_session.query(ImapAccount.id).filter_by(
                    email_address=args.email_address).one()[0]
        except NoResultFound:
            log.error("No record of account {0}".format(args.email_address))
            return

    c = zerorpc.Client(timeout=5)
    sync_srv_loc = config.get('CRISPIN_SERVER_LOC', None)
    c.connect(sync_srv_loc)
    try:
        if args.cmd == 'start':
            print c.start_sync(account_id, dummy=args.dummy)
        elif args.cmd == 'startall':
            print c.start_sync(dummy=args.dummy)
        elif args.cmd == 'stop':
            print c.stop_sync(account_id)
        elif args.cmd == 'stopall':
            print c.stop_sync()
        elif args.cmd == 'status':
            print c.sync_status()
        else:
            print >>sys.stderr, "No such command."
            sys.exit(1)
    except zerorpc.exceptions.TimeoutExpired:
        print >>sys.stderr, \
                "Can't connect to sync service. Is it running? (./inbox start)"
        sys.exit(1)

def stop(args):
    print """
\033[91m     Cleaning up...
\033[0m"""
    # from inbox.server.app import stopserver
    # stopserver()

    print """
\033[91m     Stopped.
\033[0m"""
    # os.system("stty echo")
    sys.exit(0)

def console(args):
    from inbox.server.console import start_console
    start_console(args.email_address)

def search(args):
    import zerorpc

    try:
        c = zerorpc.Client(timeout=5)
        search_srv_loc = config.get('SEARCH_SERVER_LOC', None)
        c.connect(search_srv_loc)

        # XXX print something more useful here, like Subject: To: <snippet>
        # or something
        print c.search(args.namespace, args.query)
    except zerorpc.exceptions.TimeoutExpired:
        print >>sys.stderr, \
                "Can't connect. Is the sync server running? (./inbox start)"
        sys.exit(1)

def index(args):
    import zerorpc

    try:
        c = zerorpc.Client(timeout=5)
        search_srv_loc = config.get('SEARCH_SERVER_LOC', None)
        c.connect(search_srv_loc)
        c.index(args.namespace)
    except zerorpc.exceptions.TimeoutExpired:
        print >>sys.stderr, \
                "Can't connect. Is the sync server running? (./inbox start)"
        sys.exit(1)

def auth(args):
    from sqlalchemy.orm.exc import NoResultFound
    from inbox.server import session
    from inbox.server.models import session_scope, init_db
    from inbox.server.models.tables import ImapAccount
    from inbox.server.auth.base import BaseAuth

    email_address = args.email_address

    init_db()
    with session_scope() as db_session:
        auth_handler = BaseAuth.get_handler(email_address)

        try:
            account = db_session.query(ImapAccount).filter_by(
                    email_address=email_address).one()
        except NoResultFound:
            account = auth_handler.create_account(db_session, email_address)

        try:
            verified_account = auth_handler.verify_account(db_session, account)
        except session.NotSupportedError as e:
            print >>sys.stderr, str(e)
            sys.exit(1)

    return verified_account

def signal_handler(signal, frame):
    stop(None)

def main():
    signal.signal(signal.SIGINT, signal_handler)

    parser = argparse.ArgumentParser(description="Inbox App")
    parser.add_argument('-c', '--config', dest='config', default='config.cfg')
    subparsers = parser.add_subparsers()

    parser_start = subparsers.add_parser('start')
    parser_start.set_defaults(func=start)

    parser_start = subparsers.add_parser('debug')
    parser_start.set_defaults(func=debug)

    parser_stop = subparsers.add_parser('stop')
    parser_stop.set_defaults(func=stop)

    parser_auth = subparsers.add_parser('auth', description="Auth an email account")
    parser_auth.add_argument('email_address', help="Specify the email account to auth")
    parser_auth.set_defaults(func=auth)

    parser_console = subparsers.add_parser('console', description="REPL for crispin")
    parser_console.add_argument('-e', '--email-address',
            help='Start console with crispin client for a particular user')
    parser_console.set_defaults(func=console)

    parser_sync = subparsers.add_parser('sync', description="Start/stop mail sync")
    parser_sync.add_argument('cmd', help='start or stop')
    parser_sync.add_argument('email_address', help='Email address of the account to sync')
    parser_sync.add_argument('--dummy', action='store_true',
            help="Don't connect to IMAP backend.", default=False)
    parser_sync.set_defaults(func=sync)

    parser_index = subparsers.add_parser('index', description="Index mail")
    parser_index.add_argument('namespace',
            help='id of namespace to index mail')
    parser_index.set_defaults(func=index)

    parser_search = subparsers.add_parser('search', description="Search mail")
    parser_search.add_argument('namespace',
            help='id of namespace to search mail')
    parser_search.add_argument('query', help='Term(s) to search for')
    parser_search.set_defaults(func=search)

    args = parser.parse_args()

    load_config(args.config)
    configure_general_logging()

    args.func(args)

if __name__=="__main__":
    main()
